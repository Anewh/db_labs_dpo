-- заказы
CREATE TABLE public."order" (
    id integer generated by DEFAULT AS identity PRIMARY KEY,
    created_at timestamp NOT NULL DEFAULT NOW(),
    customer_email varchar(128),
    is_paid bool NOT NULL DEFAULT false,
    total_sum numeric,
    utm_source text,
	ip_source inet,
	sort int, -- вот это тут прочто чтобы было как по заданию
	custom jsonb
);

CREATE EXTENSION pg_trgm;
CREATE EXTENSION btree_gist;

INSERT INTO public.order (
    id,
    created_at,
    customer_email,
    is_paid,
    total_sum,
    utm_source,
    ip_source,
    sort,
    custom
)
SELECT 
    s.id, 

    timestamp '2023-01-01 00:00:00' + CONCAT(s.id::text, ' day ', TRUNC(RANDOM() * 22 + 1), ' hours ')::interval,

    CONCAT(
        SUBSTRING(MD5(RANDOM()::text) from 0 for 10), '@', 
        SUBSTRING(MD5(RANDOM()::text) from 0 for 5), '.',
        SUBSTRING(MD5(RANDOM()::text) from 0 for 5)
    ),

    (CASE WHEN RANDOM() > 0.6835 THEN true ELSE false END),

    TRUNC(RANDOM() * 100000 + 50),

    SUBSTRING(MD5(RANDOM()::text) from 0 for TRUNC(RANDOM() * 5 + 2)::int),

    CONCAT(
      TRUNC(RANDOM() * 250 + 2)::int, '.' , 
      TRUNC(RANDOM() * 250 + 2)::int, '.', 
      TRUNC(RANDOM() * 250 + 2)::int, '.',
      TRUNC(RANDOM() * 250 + 2)::int
    )::inet,

    TRUNC(RANDOM() * 100000 + 1),

    jsonb_build_object(
      'error', (CASE WHEN random() > 0.7237 THEN true ELSE false END),
      'code', TRUNC(RANDOM() * 400 + 100)
    )
FROM 
    generate_series(1, 10000) AS s(id)
ORDER BY s.id;